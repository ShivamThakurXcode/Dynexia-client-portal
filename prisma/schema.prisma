// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("client") // client, admin

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  documents     Document[]
  invoices      Invoice[]
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  teamMemberships TeamMember[]
  onboarding    Onboarding?
  notes         Note[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String
  status      String    // In Progress, Completed, Planning, Review, On Hold
  startDate   DateTime
  dueDate     DateTime
  progress    Int       @default(0) // 0-100
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  team        TeamMember[]
  milestones  Milestone[]
  documents   Document[]
  invoices    Invoice[]
  messages    Message[]
  notes       Note[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TeamMember {
  id        String  @id @default(cuid())
  role      String  // Project Manager, Designer, Developer, etc.
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Milestone {
  id        String   @id @default(cuid())
  name      String
  status    String   // Completed, In Progress, Not Started
  date      DateTime
  
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id          String  @id @default(cuid())
  name        String
  url         String
  size        Int
  type        String
  description String?
  documentType String? // Design, Contract, Invoice, etc.
  
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invoice {
  id        String   @id @default(cuid())
  amount    Float
  status    String   // Paid, Unpaid, Overdue, Pending
  dueDate   DateTime
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String  @id @default(cuid())
  content   String
  read      Boolean @default(false)
  
  senderId  String
  sender    User    @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  
  receiverId String?
  receiver   User?   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: SetNull)
  
  projectId  String?
  project    Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Note {
  id        String  @id @default(cuid())
  title     String
  content   String
  type      String  // Client, Team
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Onboarding {
  id                 String  @id @default(cuid())
  companyName        String
  website            String?
  industry           String
  projectType        String
  projectGoals       String
  inspirationWebsites String?
  brandColors        String?
  timeline           String?
  budget             String?
  additionalInfo     String?
  completed          Boolean @default(false)
  
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
